<?php
/**
 * @file
 * Code for the bb_misc feature.
 */

include_once 'bb_misc.features.inc';

function computed_field_field_total_orders_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $entity_field[0]['value'] = db_query("SELECT COUNT(order_id) FROM {commerce_order} WHERE status = 'completed' AND uid = :uid", array(':uid' => $entity->uid))->fetchField(0);
}

/**
 * Implements hook_permission().
 *
 * Define permission to allow editing custom fields:
 * * field_customs_id
 */
function bb_misc_permission() {
  return array(
    'view own field_customs_id' => array('title' => t('View own field_customs_id')),
    // there oughtn't be a circumstance for editing one's own customs id... but...
    'edit own field_customs_id' => array('title' => t('Edit own field_customs_id')),
    'view any field_customs_id' => array('title' => t('View any field_customs_id')),
    'edit any field_customs_id' => array('title' => t('Edit any field_customs_id')),
  );
}

/**
 * Implements hook_field_access().
 *
 * Special permissions for:
 * * field_customs_id
 */
function bb_misc_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_customs_id') {
    if (user_access('edit any commerce_order entity of bundle commerce_order') || user_access('administer commerce_order entities')) {
      return TRUE;
    }
    $context = 'any';
    if ($entity_type == 'commerce_order' && $entity && $entity->uid == $account->uid) {
      $context = 'own';
    }
    $perm = $op . ' ' . $context . ' field_customs_id';
    $access = user_access($perm, $account);
    return $access;
  }
  return TRUE;
}

/*
 * Implements hook_entity_presave().
 *
 * @todo docs
 */
function bb_misc_entity_presave($entity, $type) {
  if ($type == 'commerce_order' && arg(3) == 'fulfil_international') {
    if (is_array($entity->field_customs_id) && !empty($entity->field_customs_id['und']) && !empty(trim($entity->field_customs_id['und'][0]['value']))) {
      $entity->status = 'completed';
      if (empty($entity->field_shipped_date)) {
        $entity->field_shipped_date['und'][0]['value'] = date("Y-m-d H:i:s");
      }
    } else {
      $entity->status = 'processing';
      unset($entity->field_shipped_date['und']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bb_misc_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a PayPal WPS option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find PayPal WPS...
      if ($method_id == 'paypal_wps') {
        // Prepare the replacement radio button text with icons.
        $icons = commerce_paypal_icons();
        $value = t('!logo PayPal', array('!logo' => $icons['paypal']));

        // Remove the CSS.
        unset($form['commerce_payment']['payment_method']['#attached']['css']);

        break;
      }
    }
  }
}

/**
 * Implements hook_commerce_checkout_page_info_alter().
 *
 * Re-label the next-step button.
 */
function bb_misc_commerce_checkout_page_info_alter(&$pages) {
  if (!empty($pages['checkout'])) {
    $pages['checkout']['submit_value'] = t('Complete order');
  }
}

/**
 * Add shipping to an order.
 *
 * Used by express checkout.
 * Via https://www.drupal.org/node/1387720#comment-7708361
 */
function bb_misc_commerce_express_checkout_pre_redirect_alter($order, $context) {
  $service_name = $context['service_name'];

  if (isset($service_name) && !isset($order->shipping_rates[$service_name])) {
    // Make the chosen service available to the order.
    commerce_shipping_service_rate_order($service_name, $order);
  }
  elseif (!isset($service_name)) {
    if (empty($order->shipping_rates)) {
      // No available rate.
      return;
    }
    $service_name = key($order->shipping_rates);
  }
  // Delete any existing shipping line items from the order.
  commerce_shipping_delete_shipping_line_items($order, TRUE);
  // Extract the unit price from the calculated rate.
  $rate_line_item = $order->shipping_rates[$service_name];
  $rate_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $rate_line_item);
  $unit_price = $rate_line_item_wrapper->commerce_unit_price->value();
  // Create a new shipping line item with the calculated rate from the form.
  $line_item = commerce_shipping_line_item_new($service_name, $unit_price, $order->order_id, $rate_line_item->data, $rate_line_item->type);
  // Save and add the line item to the order.
  $new_line_item = commerce_shipping_add_shipping_line_item($line_item, $order, TRUE);
  commerce_order_save($order);
}
